import groovy.util.logging.Log
import tech.wetech.flexmodel.codegen.AbstractGenerator
import tech.wetech.flexmodel.codegen.GenerationContext

import java.nio.file.Path

/**
 * TypeScript SDK枚举生成器
 * @author cjbi
 */
@Log
class TypeScriptSdkEnumGenerator extends AbstractGenerator {

  @Override
  String getTargetFile(GenerationContext context, String targetDirectory) {
    return Path.of(targetDirectory, context.enumClass.getShortClassName() + ".ts").toString()
  }

  @Override
  void writeEnum(PrintWriter out, GenerationContext context) {
    def enumClass = context.enumClass;
    def className = enumClass.shortClassName
    def elements = enumClass.elements

    // 文档注释
    out.println "/**"
    if (enumClass.comment) {
      out.println " * ${enumClass.comment}"
    }
    out.println " * Generated by Flexmodel Generator"
    out.println " */"
    out.println ""

    // 枚举定义
    out.println "export enum ${className} {"
    elements.each { element ->
      out.println "  ${element} = '${element}',"
    }
    out.println "}"
    out.println ""

    // 类型定义
    out.println "export type ${className}Type = keyof typeof ${className};"
    out.println ""

    // 工具类
    out.println "export class ${className}Utils {"
    out.println "  /**"
    out.println "   * 获取所有枚举值"
    out.println "   */"
    out.println "  static values(): ${className}[] {"
    out.println "    return Object.values(${className});"
    out.println "  }"
    out.println ""

    out.println "  /**"
    out.println "   * 从字符串创建枚举实例"
    out.println "   */"
    out.println "  static fromString(value: string): ${className} {"
    out.println "    const enumValue = Object.values(${className}).find(item => item === value);"
    out.println "    if (!enumValue) {"
    out.println "      throw new Error(`Invalid ${className} value: \${value}`);"
    out.println "    }"
    out.println "    return enumValue;"
    out.println "  }"
    out.println ""

    out.println "  /**"
    out.println "   * 检查值是否为有效的枚举值"
    out.println "   */"
    out.println "  static isValid(value: string): boolean {"
    out.println "    return Object.values(${className}).includes(value as ${className});"
    out.println "  }"
    out.println ""

    out.println "  /**"
    out.println "   * 获取枚举的字符串表示"
    out.println "   */"
    out.println "  static toString(enumValue: ${className}): string {"
    out.println "    return enumValue;"
    out.println "  }"
    out.println "}"
  }
}

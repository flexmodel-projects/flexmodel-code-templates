import groovy.util.logging.Log
import tech.wetech.flexmodel.codegen.AbstractGenerator
import tech.wetech.flexmodel.codegen.GenerationContext

import java.nio.file.Path

/**
 * JavaScript SDK枚举生成器
 * @author cjbi
 */
@Log
class JavaScriptSdkEnumGenerator extends AbstractGenerator {

  @Override
  String getTargetFile(GenerationContext context, String targetDirectory) {
    return Path.of(targetDirectory, context.enumClass.getShortClassName() + ".js").toString()
  }

  @Override
  void writeEnum(PrintWriter out, GenerationContext context) {
    def enumClass = context.enumClass;
    def className = enumClass.shortClassName
    def elements = enumClass.elements

    // 文档注释
    out.println "/**"
    if (enumClass.comment) {
      out.println " * ${enumClass.comment}"
    }
    out.println " * Generated by Flexmodel Generator"
    out.println " */"
    out.println ""

    // 类定义
    out.println "export class ${className} {"
    out.println "  constructor(value) {"
    out.println "    this.value = value;"
    out.println "  }"
    out.println ""

    // 枚举值定义
    elements.each { element ->
      out.println "  static ${element} = new ${className}('${element}');"
    }
    out.println ""

    // 所有枚举值的数组
    out.println "  static values() {"
    out.println "    return ["
    elements.eachWithIndex { element, index ->
      if (index < elements.size() - 1) {
        out.println "      ${className}.${element},"
      } else {
        out.println "      ${className}.${element}"
      }
    }
    out.println "    ];"
    out.println "  }"
    out.println ""

    // 从字符串创建实例的静态方法
    out.println "  static fromString(value) {"
    out.println "    const enumValue = ${className}.values().find(item => item.value === value);"
    out.println "    if (!enumValue) {"
    out.println "      throw new Error(`Invalid ${className} value: \${value}`);"
    out.println "    }"
    out.println "    return enumValue;"
    out.println "  }"
    out.println ""

    // toString方法
    out.println "  toString() {"
    out.println "    return this.value;"
    out.println "  }"
    out.println ""

    // valueOf方法
    out.println "  valueOf() {"
    out.println "    return this.value;"
    out.println "  }"
    out.println ""

    // equals方法
    out.println "  equals(other) {"
    out.println "    return other instanceof ${className} && this.value === other.value;"
    out.println "  }"
    out.println "}"
  }
}

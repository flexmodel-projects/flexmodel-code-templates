import groovy.util.logging.Log
import tech.wetech.flexmodel.codegen.AbstractGenerator
import tech.wetech.flexmodel.codegen.GenerationContext

import java.nio.file.Path

/**
 * Python SDK枚举生成器
 * @author cjbi
 */
@Log
class PythonSdkEnumGenerator extends AbstractGenerator {

  @Override
  String getTargetFile(GenerationContext context, String targetDirectory) {
    return Path.of(targetDirectory, context.enumClass.getShortClassName().toLowerCase() + ".py").toString()
  }

  @Override
  void writeEnum(PrintWriter out, GenerationContext context) {
    def enumClass = context.enumClass;
    def className = enumClass.shortClassName
    def elements = enumClass.elements

    // 文档字符串
    out.println '"""'
    if (enumClass.comment) {
      out.println " * ${enumClass.comment}"
    }
    out.println " * Generated by Flexmodel Generator"
    out.println '"""'
    out.println ""

    // 导入语句
    out.println "from enum import Enum"
    out.println ""

    // 类定义
    out.println "class ${className}(Enum):"
    out.println "    \"\"\""
    if (enumClass.comment) {
      out.println "    ${enumClass.comment}"
    }
    out.println "    \"\"\""
    out.println ""

    // 枚举值定义
    elements.each { element ->
      out.println "    ${element} = \"${element}\""
    }
    out.println ""

    // 类方法
    out.println "    @classmethod"
    out.println "    def from_string(cls, value: str) -> '${className}':"
    out.println "        \"\"\""
    out.println "        从字符串创建枚举实例"
    out.println "        \"\"\""
    out.println "        for item in cls:"
    out.println "            if item.value == value:"
    out.println "                return item"
    out.println "        raise ValueError(f\"Invalid ${className} value: {value}\")"
    out.println ""

    out.println "    def __str__(self) -> str:"
    out.println "        return self.value"
    out.println ""

    out.println "    def __repr__(self) -> str:"
    out.println "        return f\"${className}.{self.name}\""
  }
}
